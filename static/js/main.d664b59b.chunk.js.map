{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","name","email","id","className","alt","src","CardList","Robots","cardComp","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","components","App","event","target","value","fetch","then","response","json","users","filterRobots","filter","robo","toLowerCase","includes","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCFSC,EAdF,SAACC,GAAU,IAChBC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GACnB,OAEC,yBAAKC,UAAU,wDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,eACrB,6BACC,4BAAKF,GACL,2BAAIC,MCKOK,EAXE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACZC,EAAWD,EAAOE,KAAI,SAACC,EAAKC,GAClC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAET,GAAIK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGX,KAAMC,MAAOM,EAAOI,GAAGV,WAE7E,OACC,6BACGO,ICIUK,EAZG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKZ,UAAU,OACd,2BACAA,UAAU,oCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEEI,G,MATF,SAACpB,GACb,OACC,yBAAKqB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnExB,EAAMyB,YCeKC,E,kDAjBd,WAAY1B,GAAO,IAAD,8BACjB,cAAMA,IACD2B,MAAQ,CACZC,UAAU,GAHM,E,8DAMAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACN,uDAEDG,KAAK/B,MAAMyB,a,GAfOQ,cC2CZC,E,kDAnCd,aAAc,IAAD,8BACZ,gBAYDf,SAAW,SAACgB,GACX,EAAKH,SAAS,CAAEjB,YAAaoB,EAAMC,OAAOC,SAZ1C,EAAKV,MAAQ,CACZnB,OAAQ,GACRO,YAAa,IAJF,E,gEAOO,IAAD,OAClBuB,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKV,SAAS,CAACxB,OAAQkC,S,+BAM9B,IAAD,EACqBX,KAAKJ,MAA1BnB,EADA,EACAA,OAAOO,EADP,EACOA,YACR4B,EAAenC,EAAOoC,QAAO,SAAAC,GAClC,OAAOA,EAAK5C,KAAK6C,cAAcC,SAAShC,EAAY+B,kBAErD,OACA,yBAAK1C,UAAU,MACd,6CACA,kBAAC,EAAD,CAAWY,aAAce,KAAKZ,WAC7B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUX,OAAQmC,W,GA5BNK,IAAMC,WCAxBC,IAASC,OAAO,kBAAC,IAAMC,WAAP,KACf,kBAAC,EAAD,MADe,KAEdC,SAASC,eAAe,SPwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.d664b59b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from'react';\n\nconst Card = (props) =>{\n\tconst {name, email,id} = props;//anula a necessidade de por props. antes dac coisas\n\treturn (\n\t\t\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-10\">\n\t\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?100x100\"`}/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\n\nconst CardList = ({Robots}) =>{\n\tconst cardComp = Robots.map((user,i)=>{\n\treturn <Card key={i}id={Robots[i].id} name={Robots[i].name} email={Robots[i].email}/> })\n\n\treturn (\n\t\t<div>\n\t\t  {cardComp}\n\t    </div>\n\t)\n}\n\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({searchfield, searchChange}) => {\n\treturn(\n\t\t<div className=\"pa2\">\n\t\t\t<input \n\t\t\tclassName=\"pa3 ba b- -green bg-lightest-blue\" \n\t\t\ttype='search' \n\t\t\tplaceholder=\"search robots\"\n\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t)\n}\nexport default SearchBox;","import React from \"react\";\n\nconst Scroll=(props)=>{\n\treturn (\n\t\t<div style={{overflowY: \"scroll\", border: \"5px solid black\", height: \"800px\"}}>\n\t\t {props.children}\n\t\t</div>\n\t);\n\n};\n\nexport default Scroll;\n","import React, { components } from \"react\";\n\nclass ErrorBoundry extends components{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\tcomponentDidCatch(error, info){\n\t\tthis.setState({hasError:true})\n\t}\n\n\treturn(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1>Ooops, that is not good</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\nexport default ErrorBoundry;","import React from \"react\"\nimport CardList from \"../components/CardList\"\n// import { Robots } from \"./Robots\"\nimport SearchBox from \"../components/SearchBox\"\nimport \"./App.css\"\nimport Scroll from \"../components/Scroll\"\nimport ErrorBoundry from \"../components/ErrorBoundry\"\n\n\nclass App extends React.Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tRobots: [],\n\t\t\tsearchfield: \"\",\n\t\t}\n\t}\n\tcomponentDidMount(){\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t\t.then(response=> response.json() )\n\t\t\t.then(users=> this.setState({Robots: users}))\n\t\t\t} \n\n\tonChange = (event) =>{\n\t\tthis.setState({ searchfield: event.target.value})\n\t}\n\trender(){\n\t\tconst {Robots,searchfield}= this.state;\n\t\tconst filterRobots = Robots.filter(robo=>{\n\t\t\treturn robo.name.toLowerCase().includes(searchfield.toLowerCase())\n\t\t})\n\t\treturn (\n\t\t<div className=\"tc\">\n\t\t\t<h1> RoboFriends </h1>\n\t\t\t<SearchBox searchChange={this.onChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<CardList Robots={filterRobots} />\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t</Scroll>\n\t\t</div>\n\t\t);\n\t}\n\t\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from \"./containers/App\";\n\n\nReactDOM.render(<React.StrictMode> \n\t<App/> </React.StrictMode> ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}